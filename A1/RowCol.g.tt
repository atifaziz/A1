<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
#region Copyright (c) 2016 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// Generated: <#= DateTime.Now.ToString("r") #>

namespace A1
{
    using System;
<# foreach (var e in new[] { "Row", "Col" })
    { #>

    partial struct <#= e #> : IEquatable<<#= e #>>, IComparable<<#= e #>>
    {
        public static readonly <#= e #> Zero = default(<#= e #>);

        readonly int _n;

        public <#= e #>(int n)
        {
            if (n < 0) throw new ArgumentOutOfRangeException(nameof(n));
            _n = n;
        }

        public bool Equals(<#= e #> other) => _n == other._n;
        public override bool Equals(object obj) => obj is <#= e #> && Equals((<#= e #>) obj);
        public override int GetHashCode() => _n;

        public int CompareTo(<#= e #> other) => _n.CompareTo(other._n);

        public override string ToString() => _n.ToString();

        public static <#= e #> operator +(<#= e #> col, int n) => new <#= e #>(col._n + n);
        public static <#= e #> operator -(<#= e #> col, int n) => new <#= e #>(col._n - n);
        public static <#= e #> operator ++(<#= e #> col) => col + 1;
        public static <#= e #> operator --(<#= e #> col) => col - 1;

        public static bool operator ==(<#= e #> left, <#= e #> right) => left.Equals(right);
        public static bool operator !=(<#= e #> left, <#= e #> right) => !left.Equals(right);

        public static explicit operator <#= e #>(int value) => new <#= e #>(value);
        public static implicit operator int(<#= e #> col) => col._n;
    }
<# } #>
}
