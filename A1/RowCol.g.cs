#region Copyright (c) 2016 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// Generated: Mon, 19 Dec 2016 15:52:44 GMT

namespace A1
{
    using System;

    partial struct Row : IEquatable<Row>, IComparable<Row>
    {
        public static readonly Row First = default(Row);

        public int Offset { get; }
        int Number => Offset + 1;

        public static Row FromOffset(int offset) => new Row(offset + 1);

        public Row(int n)
        {
            if (n < 1) throw new ArgumentOutOfRangeException(nameof(n));
            Offset = n - 1;
        }

        public bool Equals(Row other) => Offset == other.Offset;
        public override bool Equals(object obj) => obj is Row && Equals((Row) obj);
        public override int GetHashCode() => Offset;

        public int CompareTo(Row other) => Offset.CompareTo(other.Offset);

        public override string ToString() => Number.ToString();

        public static Row operator +(Row row, int n) => new Row(row.Number + n);
        public static Row operator -(Row row, int n) => new Row(row.Number - n);
        public static int operator -(Row a, Row b) => a.Offset - b.Offset;
        public static Row operator ++(Row row) => row + 1;
        public static Row operator --(Row row) => row - 1;

        public static bool operator ==(Row left, Row right) => left.Equals(right);
        public static bool operator !=(Row left, Row right) => !left.Equals(right);

        public static explicit operator Row(int value) => new Row(value);
        public static implicit operator int(Row row) => row.Number;
    }

    partial struct Col : IEquatable<Col>, IComparable<Col>
    {
        public static readonly Col First = default(Col);

        public int Offset { get; }
        int Number => Offset + 1;

        public static Col FromOffset(int offset) => new Col(offset + 1);

        public Col(int n)
        {
            if (n < 1) throw new ArgumentOutOfRangeException(nameof(n));
            Offset = n - 1;
        }

        public bool Equals(Col other) => Offset == other.Offset;
        public override bool Equals(object obj) => obj is Col && Equals((Col) obj);
        public override int GetHashCode() => Offset;

        public int CompareTo(Col other) => Offset.CompareTo(other.Offset);

        public override string ToString() => Number.ToString();

        public static Col operator +(Col col, int n) => new Col(col.Number + n);
        public static Col operator -(Col col, int n) => new Col(col.Number - n);
        public static int operator -(Col a, Col b) => a.Offset - b.Offset;
        public static Col operator ++(Col col) => col + 1;
        public static Col operator --(Col col) => col - 1;

        public static bool operator ==(Col left, Col right) => left.Equals(right);
        public static bool operator !=(Col left, Col right) => !left.Equals(right);

        public static explicit operator Col(int value) => new Col(value);
        public static implicit operator int(Col col) => col.Number;
    }
}
